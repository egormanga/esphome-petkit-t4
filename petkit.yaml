# Petkit T4 ESPHome Firmware

dashboard_import:
  package_import_url: github://egormanga/esphome-petkit-t4/petkit.yml

esphome:
  name: petkit-t4
  friendly_name: Petkit T4
  project:
    name: egormanga.esphome-petkit-t4
    version: 0.9.3
  platformio_options:
    board_upload.maximum_size: 0x800000
  #on_boot:
    #- lambda: uart_set_pin(UART_NUM_1, 25, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    #- lambda: esp_wifi_set_protocol(WIFI_IF_STA, (WIFI_PROTOCOL_11B | WIFI_PROTOCOL_11G));

external_components:
  - source: ./components
  - source: github://egormanga/esphome-bm8563

esp32:
  board: esp32dev
  flash_size: 8MB

wifi:
  id: wifi_
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password
  power_save_mode: none
  #output_power: 20dB
  on_connect:
    rtttl.play: :d=16,o=6,b=100:e,g
  on_disconnect:
    rtttl.play: :d=16,o=6,b=100:g,e

captive_portal:

#esp32_improv:
#  authorizer: none

ota:
  platform: esphome
  password: !secret ota_password
  on_state_change:
    - pkt4_mcu.motor:
        motor: drum
        mode: stop
    - globals.set:
        id: ota_state
        value: !lambda return state;
    - component.update: oled

api:
  encryption:
    key: !secret api_encryption_key

logger:
  hardware_uart: UART1
  baud_rate: 0  # disable

uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200
  debug:
    direction: TX
    after:
      bytes: 0x100
      timeout: 10ms
    sequence:
      lambda: UARTDebug::log_hex(direction, bytes, ' ');

power_supply:
  - id: vreg_display
    pin:
      number: GPIO2
      ignore_strapping_warning: true
    enable_on_boot: true

  - id: vreg_bus
    pin: GPIO26
    enable_on_boot: true

  - id: vreg_bus_rev2
    pin: GPIO27
    enable_on_boot: true

output:
  - platform: ledc
    id: beeper
    pin: GPIO16

i2c:
  sda:
    number: GPIO15
    ignore_strapping_warning: true
  scl: GPIO4
  scan: false

spi:
  mosi_pin: GPIO23
  clk_pin: GPIO18

time:
  - platform: bm8563

  - platform: homeassistant
    on_time_sync:
      bm8563.write_time:

rtttl:
  output: beeper
  gain: 50%  # PWM duty

substitutions:
  ap_ssid: !secret ap_ssid
  ap_password: !secret ap_password

qr_code:
  id: qrcode_ap
  value: "WIFI:S:${ap_ssid};T:WPA;P:${ap_password};;"

font:
  id: font_weight
  file:
    type: gfonts
    family: Ubuntu Mono
  size: 48

image:
  - id: icon_logo
    file: mdi:inbox
    type: binary
    resize: 96x96

  - id: icon_clean
    file: mdi:recycle
    type: binary
    resize: 96x96

  - id: icon_maintenance
    file: mdi:progress-wrench
    type: binary
    resize: 96x96

  - id: icon_level
    file: mdi:spirit-level
    type: binary
    resize: 96x96

  - id: icon_tray
    file: mdi:tray-alert
    type: binary
    resize: 96x96

  - id: icon_auto_clean
    file: mdi:recycle-variant
    type: binary
    resize: 96x96

  - id: icon_problem
    file: mdi:alert
    type: binary
    resize: 96x96

  - id: icon_tray_full
    file: mdi:tray-full
    type: binary
    resize: 96x96

  - id: icon_ota
    file: mdi:progress-download
    type: binary
    resize: 96x96

  - id: icon_weight
    file: mdi:weight-kilogram
    type: binary
    resize: 64x64

  - id: icon_waste
    file: mdi:liquid-spot
    type: binary
    resize: 64x64

display:
  platform: ssd1306_spi
  id: oled
  model: 'SH1107 128x128'
  cs_pin:
    number: GPIO5
    ignore_strapping_warning: true
  dc_pin: GPIO19
  reset_pin: GPIO17
  data_rate: 40MHz  # max
  external_vcc: true
  #power_supply: vreg_oled_bias
  rotation: 180Â°
  update_interval: 0.01s
  lambda: |-
    static uint16_t clip = 0;

    if (id(ota_state)) it.image(it.get_width()/2, it.get_height()/2, id(icon_ota), ImageAlign::CENTER);
    else if (id(clean).state || (id(maintenance).state && millis() % 5000 < 1500) || (id(level_needed) && (!id(maintenance)))) {
      BaseImage *icon;
      if (id(approach).state) icon = id(icon_problem);
      else if (id(clean).state) icon = id(icon_clean);
      else if (id(maintenance).state) icon = id(icon_maintenance);
      else if (id(level_needed)) icon = id(icon_level);
      else return;  // wtf

      it.start_clipping((it.get_width() - icon->get_width())/2 + (clip<icon->get_width()?clip:0), 0, clip>=icon->get_width()?((it.get_width() - icon->get_width())/2 + max(0, clip-icon->get_width())):it.get_width(), it.get_height());
      if ((clip += 2) > icon->get_width()*2) clip = 0;

      it.image(it.get_width()/2, it.get_height()/2, icon, ImageAlign::CENTER);
      return;
    } else if (id(cleaned_at) && millis() - id(cleaned_at) < 10000) {
      it.image(it.get_width()/2, (it.get_height() - id(icon_waste).get_height())/2, id(icon_waste), ImageAlign::CENTER);
      it.printf(it.get_width()/2, it.get_height(), id(font_weight), TextAlign::BOTTOM_CENTER, "%.0f", id(waste_collected)*1000);
    } else if (id(tray_full).state && millis() % 5000 < 1000) {
      it.image(it.get_width()/2, it.get_height()/2, id(icon_tray_full), ImageAlign::CENTER);
    } else if (id(clean_pending).state && millis() % 5000 < 2000) {
      it.image(it.get_width()/2, it.get_height()/2, id(icon_auto_clean), ImageAlign::CENTER);
    } else if (id(maintenance).state || id(pet_weight).state > 0.01f) {
      it.image(it.get_width()/2, (it.get_height() - id(icon_weight).get_height())/2, id(icon_weight), ImageAlign::CENTER);
      it.printf(it.get_width()/2, it.get_height(), id(font_weight), TextAlign::BOTTOM_CENTER, "%.2f", id(maintenance).state?id(weight).state-id(waste_collected):id(pet_weight).state);
    } else if (id(cover).state || id(bin).state || id(approach).state) {
      it.image(it.get_width()/2, it.get_height()/2, id(icon_problem), ImageAlign::CENTER);
    } else if (id(tray).state) {
      it.image(it.get_width()/2, it.get_height()/2, id(icon_tray), ImageAlign::CENTER);
    } else if (id(sensor_uptime).state < 10) {
      it.image(it.get_width()/2, it.get_height()/2, id(icon_logo), ImageAlign::CENTER);
    } else if (!id(wifi_).is_connected()) {
      static uint8_t ii = 0;
      uint8_t scale = (min(it.get_width(), it.get_height()) / id(qrcode_ap).get_size());
      it.qr_code((++ii/8 % (it.get_width() - id(qrcode_ap).get_size()*scale)), (ii/8 / (it.get_height() - id(qrcode_ap).get_size()*scale)), id(qrcode_ap), COLOR_ON, scale);
    }

    clip = 0;

globals:
  - id: weight_zero
    type: int
    initial_value: '7975680'
    restore_value: true

  - id: weight_scale
    type: float
    initial_value: '-1/65536.f'
    restore_value: true

  - id: litter_mass
    type: float
    restore_value: true

  - id: waste_collected
    type: float
    restore_value: true

  - id: litter_discarded
    type: float
    restore_value: true

  - id: waste_pending
    type: float

  - id: cleans_left
    type: int

  - id: level_needed
    type: bool

  - id: ota_state
    type: int

  - id: cleaned_at
    type: long

pkt4_mcu:

sensor:
  - platform: pkt4_mcu
    distance:
      name: Distance
      entity_category: diagnostic
      disabled_by_default: true
      filters:
        - calibrate_polynomial:
            degree: 3
            datapoints:
              - 8192 -> 0
              - 1024 -> 1
              - 256 -> 5
              - 32 -> 10
              #- 31 -> inf
        - clamp:
            max_value: 10
        - delta: 0.5
    weight:
      id: weight
      name: Weight
      icon: mdi:scale
      entity_category: diagnostic
      disabled_by_default: true
      filters:
        - offset: !lambda return -id(weight_zero);
        - multiply: !lambda return id(weight_scale);
        - delta: 0.005
      on_value_range:
        - above: !lambda return (id(waste_collected) + id(litter_threshold).state - .1f);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=32,o=6,b=100:g

        - above: !lambda return (id(waste_collected) + id(litter_threshold).state - .05f);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=32,o=6,b=100:g,64p,g

        - above: !lambda return (id(waste_collected) + id(litter_threshold).state);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=32,o=6,b=100:g,64p,g,64p,g

        - above: !lambda return (id(waste_collected) + id(litter_threshold).state + .1f);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=8,o=6,b=100:4g

        - above: !lambda return (id(waste_collected) + id(litter_threshold).state + .25f);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=8,o=6,b=100:g,p,4g

        - above: !lambda return (id(waste_collected) + id(litter_threshold).state + .5f);
          then:
            if:
              condition:
                switch.is_on: maintenance
              then:
                rtttl.play: :d=8,o=6,b=100:g,p,g,p,4g

  - platform: template
    id: pet_weight
    name: Pet Weight
    icon: mdi:paw
    unit_of_measurement: kg
    device_class: weight
    state_class: measurement
    accuracy_decimals: 2
    update_interval: 1s
    lambda: return (max(0.f, id(weight).state) - id(litter_mass) - id(waste_collected));
    on_value_range:
      above: !lambda return id(clean_threshold).state/1000.f;  # it's non-dumped waste
      below: !lambda return id(pet_threshold).state;  # not the actual pet inside
      then:
        if:
          condition:
            lambda: return id(cleans_left) <= 0;
          then:
            globals.set:
              id: cleans_left
              value: !lambda return id(clean_times).state;

  - platform: template
    id: pet_mass
    unit_of_measurement: kg
    lambda: |-
      if (id(pet_inside).state) return id(pet_weight).state;
      else return {};
    update_interval: 1s
    filters:
      quantile:

  - platform: template
    id: pet_body_mass
    name: Pet Body Mass
    icon: mdi:scale-bathroom
    unit_of_measurement: kg
    device_class: weight
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never
    lambda: return (id(pet_mass).state - id(pet_weight).state);
    filters:
      - clamp:
          min_value: 0
      - filter_out: 0

  - platform: template
    name: Litter Mass
    icon: mdi:bucket
    unit_of_measurement: g
    device_class: weight
    state_class: measurement
    accuracy_decimals: 0
    update_interval: 1s
    lambda: return id(litter_mass)*1000;

  - platform: template
    name: Waste Collected
    icon: mdi:liquid-spot
    unit_of_measurement: g
    device_class: weight
    state_class: measurement
    accuracy_decimals: 0
    update_interval: 1s
    lambda: return id(waste_collected)*1000;

  - platform: template
    name: Litter Discarded
    icon: mdi:delete-variant
    unit_of_measurement: kg
    device_class: weight
    state_class: total_increasing
    accuracy_decimals: 2
    update_interval: 1s
    lambda: return id(litter_discarded);

  - platform: template
    name: Cleans Left
    icon: mdi:counter
    accuracy_decimals: 0
    entity_category: diagnostic
    disabled_by_default: true
    update_interval: 1s
    lambda: return id(cleans_left);

  - platform: adc
    name: 3V3
    entity_category: diagnostic
    disabled_by_default: true
    pin: GPIO32
    attenuation: 12dB
    filters:
      multiply: 16

  - platform: pulse_counter
    id: mcu_interrupts
    pin:
      number: GPIO22
      allow_other_uses: true
    internal_filter: 0s
    total:
      name: MCU Interrupts
      entity_category: diagnostic
      disabled_by_default: true

  - platform: uptime
    id: sensor_uptime
    name: Uptime
    icon: mdi:clock-start
    entity_category: diagnostic
    disabled_by_default: true

binary_sensor:
  - platform: pkt4_mcu
    approach:
      id: approach
      name: Approach
      entity_category: diagnostic
      filters:
        delayed_off: 5s
      on_press:
        if:
          condition:
            switch.is_off: maintenance
          then:
            script.execute: emergency_stop
      on_release:
        - if:
            condition:
              lambda: return id(pet_weight).state*1000 > id(pet_threshold).state;
            then:
              component.update: pet_body_mass
        - script.execute: auto_clean
    bin:
      id: bin
      name: Bin
      entity_category: diagnostic
      on_press:
        - if:
            condition:
              switch.is_off: maintenance
            then:
              pkt4_mcu.motor:
               motor: tray
               mode: stop
        - if:
            all:
              - binary_sensor.is_off: cover
              - not:
                  binary_sensor.is_on: tray
            then:
              pkt4_mcu.motor:
                motor: tray
                direction: open
                speed: 50
                mode: time
                timeout: 80
      on_release:
        - delay: 5s
        - globals.set:
            id: waste_collected
            value: !lambda return max(0.f, (max(0.f, id(weight).state) - id(litter_mass)));
        - globals.set:
            id: litter_discarded
            value: !lambda return (id(litter_discarded) + max(0.f, (id(litter_mass) - max(0.f, id(weight).state))));
        - globals.set:
            id: litter_mass
            value: !lambda return max(0.f, (max(0.f, id(weight).state) - id(waste_collected)));
        - script.execute: level_if_needed
    cover:
      id: cover
      name: Cover
      entity_category: diagnostic
      on_press:
        - pkt4_mcu.motor:
            motor: drum
            mode: stop
        - pkt4_mcu.motor:
            motor: tray
            mode: stop
      on_release:
        script.execute: level_if_needed
    drum_up:
      id: drum_up
      name: Drum Up
      entity_category: diagnostic
      on_press:
        - pkt4_mcu.motor:
            motor: drum
            mode: stop
        - switch.turn_off: motor_drum_up # XXX
        - globals.set:
            id: waste_collected
            value: !lambda return min(id(waste_pending), max(0.f, (max(0.f, id(weight).state) - id(litter_mass))));
        - script.execute: level_if_needed
    drum_down:
      id: drum_down
      name: Drum Down
      entity_category: diagnostic
      on_press:
        - pkt4_mcu.motor:
            motor: drum
            mode: stop
        - switch.turn_off: motor_drum_down # XXX
        - if:
            condition:
              switch.is_on: clean
            then:
              switch.turn_off: clean
        - if:
            condition:
              switch.is_on: maintenance
            then:
              switch.turn_off: maintenance
        - globals.set:
            id: level_needed
            value: 'true'
        - if:
            condition:
              binary_sensor.is_off: cover
            then:
              pkt4_mcu.motor:
                motor: drum
                direction: up
                speed: 100
                mode: time
                timeout: 150
    drum_level:
      id: drum_level
      name: Drum Level
      entity_category: diagnostic
      trigger_on_initial_state: true
      on_press:
        globals.set:
          id: level_needed
          value: 'true'
      on_release:
        - if:
            condition:
              lambda: return id(level_needed);
            then:
              - pkt4_mcu.motor:
                  motor: drum
                  mode: stop
              - switch.turn_off: motor_drum_up # XXX
              - switch.turn_off: motor_drum_down # XXX
              - if:
                  all:
                    - binary_sensor.is_off: cover
                    - binary_sensor.is_on: tray
                    - binary_sensor.is_off: bin
                  then:
                    pkt4_mcu.motor:
                      motor: tray
                      direction: close
                      speed: 5
                      mode: time
                      timeout: 80
        - globals.set:
            id: level_needed
            value: 'false'
        - script.execute: auto_clean
    tray:
      id: tray
      name: Tray
      entity_category: diagnostic
      disabled_by_default: true
      trigger_on_initial_state: true
      on_state:
        pkt4_mcu.motor:
          motor: tray
          mode: stop
      on_press:
        if:
          condition:
            switch.is_on: clean
          then:
            switch.turn_on: clean  # restart
          else:
            if:
              condition:
                switch.is_on: maintenance
              then:
                switch.turn_on: maintenance  # restart
              else:
                script.execute: level_if_needed
      on_release:
        script.execute: level_if_needed

  - platform: template
    id: pet_inside
    name: Pet Inside
    icon: mdi:paw
    device_class: problem
    entity_category: diagnostic
    condition:
      all:
        - switch.is_off: maintenance
        - lambda: return id(pet_weight).state >= id(pet_threshold).state;
    filters:
      delayed_off: 5s
    on_press:
      script.execute: emergency_stop
    on_release:
      script.execute: auto_clean

  - platform: template
    id: tray_full
    name: Tray Full
    icon: mdi:tray-full
    device_class: problem
    entity_category: diagnostic
    lambda: return id(waste_collected) >= id(tray_capacity).state;

  - platform: template
    id: clean_pending
    name: Clean Pending
    icon: mdi:recycle-variant
    device_class: running
    entity_category: diagnostic
    condition:
      script.is_running: clean_if_needed

  - platform: gpio
    name: Menu Button
    entity_category: diagnostic
    pin:
      number: GPIO34
      inverted: true
    on_double_click:
      if:
        condition:
          switch.is_off: maintenance
        then:
          switch.turn_on: maintenance
    on_multi_click:
      timing:
        - ON for at least 2s
      then:
        button.press: reboot

  - platform: gpio
    name: OK Button
    entity_category: diagnostic
    pin:
      number: GPIO0
      inverted: true
      ignore_strapping_warning: true
    on_click:
      button.press: level

  - platform: gpio
    name: MCU
    entity_category: diagnostic
    disabled_by_default: true
    pin:
      number: GPIO22
      allow_other_uses: true
    trigger_on_initial_state: true
    on_press:  # ready
      pkt4_mcu.init:
    on_release:  # reset
      pkt4_mcu.deinit:

button:
  - platform: template
    id: level
    name: Level
    icon: mdi:spirit-level
    on_press:
      if:
        condition:
          switch.is_on: maintenance
        then:
          switch.turn_off: maintenance
        else:
          - switch.turn_off: clean
          - globals.set:
              id: level_needed
              value: 'true'
          - script.execute: level_if_needed

  - platform: template
    name: All Litter Removed
    icon: mdi:delete-empty
    entity_category: config
    on_press:
      - globals.set:
          id: litter_mass
          value: '0'
      - globals.set:
          id: waste_collected
          value: !lambda return max(0.f, (max(0.f, id(weight).state) - id(litter_mass)));

  - platform: template
    name: Weight Calibration Zero
    icon: mdi:scale-balance
    entity_category: config
    on_press:
      globals.set:
        id: weight_zero
        value: !lambda return id(weight).raw_state;

  - platform: restart
    name: Restart
    id: reboot
    entity_category: diagnostic

  - platform: safe_mode
    name: Restart Safe Mode
    entity_category: diagnostic
    disabled_by_default: true

  - platform: factory_reset
    name: Factory Reset
    entity_category: config
    disabled_by_default: true

switch:
  - platform: template
    id: clean
    name: Clean
    icon: mdi:recycle
    optimistic: true
    restore_mode: disabled
    turn_on_action:
      if:
        all:
          - switch.is_off: maintenance
          - binary_sensor.is_off: approach
          - binary_sensor.is_off: pet_inside
          - binary_sensor.is_off: cover
          - binary_sensor.is_off: bin
          - binary_sensor.is_off: drum_up
        then:
          if:
            condition:
              not:
                binary_sensor.is_on: tray
            then:
              pkt4_mcu.motor:
                motor: tray
                direction: open
                speed: 50
                mode: time
                timeout: 80
            else:
              - script.stop: clean_if_needed
              - globals.set:
                  id: waste_pending
                  value: !lambda return max(0.f, (max(0.f, id(weight).state) - id(litter_mass)));
              - globals.set:
                  id: level_needed
                  value: 'true'
              - pkt4_mcu.motor:
                  motor: drum
                  direction: up
                  speed: 100
                  mode: time
                  timeout: 1000
        else:
          - delay: 0s  # yield
          - switch.turn_off: clean
    turn_off_action:
      - pkt4_mcu.motor:
          motor: drum
          mode: stop
      - pkt4_mcu.motor:
          motor: tray
          direction: close
          speed: 5
          mode: time
          timeout: 80
    on_turn_off:
      globals.set:
        id: cleaned_at
        value: !lambda return millis();

  - platform: template
    id: maintenance
    name: Maintenance
    icon: mdi:progress-wrench
    optimistic: true
    restore_mode: disabled
    turn_on_action:
      if:
        all:
          - switch.is_off: clean
          - binary_sensor.is_off: cover
          - binary_sensor.is_off: bin
          - binary_sensor.is_off: drum_up
          - binary_sensor.is_off: drum_level
        then:
          - globals.set:
              id: level_needed
              value: 'true'
          - if:
              condition:
                not:
                  binary_sensor.is_on: tray
              then:
                pkt4_mcu.motor:
                  motor: tray
                  direction: open
                  speed: 100
                  mode: time
                  timeout: 80
              else:
                pkt4_mcu.motor:
                  motor: drum
                  direction: up
                  speed: 100
                  mode: time
                  timeout: 120
        else:
          - delay: 0s  # yield
          - switch.turn_off: maintenance
    turn_off_action:
      - pkt4_mcu.motor:
          motor: drum
          mode: stop
      - globals.set:
          id: litter_mass
          value: !lambda return max(0.f, (max(0.f, id(weight).state) - id(waste_collected)));
      - script.execute: level_if_needed

  - platform: template
    id: do_auto_clean
    name: Auto Clean
    icon: mdi:refresh-auto
    entity_category: config
    optimistic: true
    restore_mode: restore_default_off  # better safe than sorry!
    on_turn_on:
      script.execute: auto_clean

  - platform: template
    id: motor_tray
    name: Tray
    icon: mdi:stack-overflow
    entity_category: diagnostic
    optimistic: false
    restore_mode: disabled
    lambda: return id(tray).state;
    turn_on_action:
      if:
        condition:
          binary_sensor.is_off: cover
        then:
          pkt4_mcu.motor:
            motor: tray
            direction: open
            speed: 50
            mode: time
            timeout: 80
    turn_off_action:
      if:
        all:
          - binary_sensor.is_off: cover
          - binary_sensor.is_off: bin
        then:
          pkt4_mcu.motor:
            motor: tray
            direction: close
            speed: 5
            mode: time
            timeout: 80

  - platform: template
    id: motor_drum_down
    name: Drum Down
    icon: mdi:horizontal-rotate-counterclockwise
    entity_category: diagnostic
    optimistic: true
    restore_mode: disabled
    turn_on_action:
      if:
        all:
          - binary_sensor.is_off: approach
          - binary_sensor.is_off: pet_inside
          - binary_sensor.is_off: cover
          - binary_sensor.is_off: drum_down
          - binary_sensor.is_off: bin
        then:
          - globals.set:
              id: level_needed
              value: 'true'
          - pkt4_mcu.motor:
              motor: drum
              direction: down
              speed: 100
              mode: time
              timeout: 1000
        else:
          - delay: 0s  # yield
          - switch.turn_off: motor_drum_down
    turn_off_action:
      pkt4_mcu.motor:
        motor: drum
        mode: stop

  - platform: template
    id: motor_drum_up
    name: Drum Up
    icon: mdi:horizontal-rotate-clockwise
    entity_category: diagnostic
    optimistic: true
    restore_mode: disabled
    turn_on_action:
      if:
        all:
          - binary_sensor.is_off: approach
          - binary_sensor.is_off: pet_inside
          - binary_sensor.is_off: cover
          - binary_sensor.is_off: drum_up
          - binary_sensor.is_off: bin
        then:
          pkt4_mcu.motor:
            motor: drum
            direction: up
            speed: 100
            mode: time
            timeout: 1000
        else:
          - delay: 0s  # yield
          - switch.turn_off: motor_drum_up
    turn_off_action:
      pkt4_mcu.motor:
        motor: drum
        mode: stop

number:
  - platform: template
    id: clean_after
    name: Clean After
    icon: mdi:cookie-clock-outline
    entity_category: config
    unit_of_measurement: min
    mode: box
    min_value: 1
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 1

  - platform: template
    id: clean_threshold
    name: Clean Threshold
    icon: mdi:hydraulic-oil-level
    entity_category: config
    unit_of_measurement: g
    mode: box
    min_value: 10
    max_value: 100
    step: 5
    optimistic: true
    restore_value: true
    initial_value: 25

  - platform: template
    id: clean_times
    name: Clean Times
    icon: mdi:repeat-variant
    entity_category: config
    min_value: 1
    max_value: 5
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 1

  - platform: template
    id: pet_threshold
    name: Pet Threshold
    icon: mdi:paw
    entity_category: config
    unit_of_measurement: kg
    mode: box
    min_value: 0.10
    max_value: 10.00
    step: 0.10
    optimistic: true
    restore_value: true
    initial_value: 1.00

  - platform: template
    id: litter_threshold
    name: Litter Threshold
    icon: mdi:pail
    entity_category: config
    unit_of_measurement: kg
    mode: box
    min_value: 1.00
    max_value: 5.00
    step: 0.10
    optimistic: true
    restore_value: true
    initial_value: 2.00

  - platform: template
    id: tray_capacity
    name: Tray Capacity
    icon: mdi:tray-arrow-down
    entity_category: config
    unit_of_measurement: kg
    mode: box
    min_value: 0.10
    max_value: 2.00
    step: 0.10
    optimistic: true
    restore_value: true
    initial_value: 1.00

  - platform: template
    name: Weight Calibration
    icon: mdi:scale-balance
    entity_category: config
    mode: box
    min_value: 0
    max_value: 10
    step: 0.01
    initial_value: NaN
    update_interval: never
    set_action:
      globals.set:
        id: weight_scale
        value: !lambda return ((float)x / (id(weight).raw_state - id(weight_zero)));

script:
  - id: level_if_needed
    then:
      - delay: 0s  # yield
      - if:
          all:
            - lambda: return id(level_needed);
            - binary_sensor.is_off: cover
            - not:
                binary_sensor.is_on: tray
          then:
            pkt4_mcu.motor:
              motor: tray
              direction: open
              speed: 50
              mode: time
              timeout: 80
          else:
            if:
              all:
                - lambda: return (!id(level_needed));
                - switch.is_off: clean
                - switch.is_off: maintenance
                - binary_sensor.is_off: drum_level
                - binary_sensor.is_off: cover
                - binary_sensor.is_on: tray
                - binary_sensor.is_off: bin
              then:
                pkt4_mcu.motor:
                  motor: tray
                  direction: close
                  speed: 5
                  mode: time
                  timeout: 80
              else:
                if:
                  any:
                    - switch.is_on: clean
                    - lambda: return id(level_needed);
                  then:
                    if:
                      all:
                        - binary_sensor.is_off: approach
                        - binary_sensor.is_off: pet_inside
                        - binary_sensor.is_off: cover
                        - binary_sensor.is_off: drum_down
                        - binary_sensor.is_off: bin
                        - binary_sensor.is_on: tray
                        - switch.is_off: maintenance
                      then:
                        - globals.set:
                            id: level_needed
                            value: 'false'  # go past the level
                        - pkt4_mcu.motor:
                            motor: drum
                            direction: down
                            speed: 100
                            mode: time
                            timeout: 1000

  - id: clean_if_needed
    mode: restart
    then:
      - delay: !lambda return id(clean_after).state*60000;
      - if:
          all:
            - switch.is_off: clean
            - switch.is_off: maintenance
            - binary_sensor.is_off: pet_inside
            - any:
              - all:
                - switch.is_on: do_auto_clean
                - lambda: return id(pet_weight).state*1000 > id(clean_threshold).state;
              - lambda: return (id(cleans_left) > 0 && id(cleans_left) < id(clean_times).state);
          then:
            switch.turn_on: clean
          else:
            - globals.set:
                id: cleans_left
                value: '0'
            - script.execute: level_if_needed

  - id: auto_clean
    then:
      if:
        all:
          - switch.is_on: do_auto_clean
          - switch.is_off: clean
          - switch.is_off: maintenance
          - binary_sensor.is_off: pet_inside
          - binary_sensor.is_off: drum_level
          - binary_sensor.is_off: tray_full
          - lambda: return id(cleans_left) > 0;
        then:
          - script.execute: clean_if_needed
          - globals.set:
              id: cleans_left
              value: !lambda return id(cleans_left)-1;
        else:
          script.execute: level_if_needed

  - id: emergency_stop
    then:
      - pkt4_mcu.motor:
          motor: drum
          mode: stop
      - if:
          all:
            - switch.is_off: clean
            - switch.is_off: maintenance
            - binary_sensor.is_on: drum_level
          then:
            globals.set:
              id: level_needed
              value: 'true'
      - switch.turn_off: clean

# by Sdore, 2024-25
#   www.sdore.me
